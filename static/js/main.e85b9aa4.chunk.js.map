{"version":3,"sources":["components/Contents.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Contents","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","comparedData","setComparedData","useEffect","fetchEvent","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","push","filter","console","log","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","bordergroundColor","className","options","legend","display","position","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e85b9aa4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Bar, Doughnut, Line } from 'react-chartjs-2';\r\nimport '../styles/Contents.css';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Contents() {\r\n\r\n    const [confirmedData, setConfirmedData] = useState({});\r\n    const [quarantinedData,setQuarantinedData] = useState({});\r\n    const [comparedData,setComparedData] = useState({});\r\n\r\n    useEffect(()=>{\r\n        const fetchEvent = async() =>{\r\n            const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\r\n            makeData(res.data)\r\n        }\r\n        const makeData = (items) => {\r\n            let arr = items.reduce((acc, cur) => {\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const death = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                const findItem = acc.find( a => a.year === year && a.month === month);\r\n\r\n                if(!findItem){ //findItem 없음\r\n                    acc.push({year,month,date,confirmed,active,death,recovered});\r\n                }\r\n\r\n                if(findItem && findItem.date < date){ //findItem이 있음\r\n                    findItem.active = active;\r\n                    findItem.death = death;\r\n                    findItem.date = date;\r\n                    findItem.year = year;\r\n                    findItem.month = month;\r\n                    findItem.recovered = recovered;\r\n                    findItem.confirmed = confirmed;\r\n                }\r\n                \r\n                return acc;\r\n            },[])\r\n\r\n            arr = arr.filter(a => (a.year === 2021));\r\n            console.log(arr);\r\n            const labels = arr.map(a=>`${a.month+1}월`)\r\n\r\n            setConfirmedData({\r\n                labels : labels,\r\n                datasets : [\r\n                    {\r\n                    label : \"국내 누적 확진자\",\r\n                    backgroundColor: \"salmon\",\r\n                    fill : true,\r\n                    data: arr.map(a=>(a.confirmed))\r\n                    },\r\n                ]\r\n            });\r\n        \r\n\r\n        setQuarantinedData({\r\n                labels : labels,\r\n                datasets : [\r\n                    {\r\n                    label : \"월별 격리자 현황\",\r\n                    borderColor : \"green\",\r\n                    fill : false,\r\n                    data: arr.map(a=>(a.active))\r\n                    },\r\n                ]\r\n            });\r\n\r\n        const last = arr[arr.length - 1]\r\n        setComparedData({\r\n            labels : [\"확진자\",\"격리해제\",\"사망\"],\r\n            datasets : [\r\n                {\r\n                label : \"누적 확진, 해제, 사망 비율\",\r\n                backgroundColor:[\"#ff3d67\",\"#059bff\",\"ffc233\"],\r\n                bordergroundColor:[\"#ff3d67\",\"#059bff\",\"ffc233\"],\r\n                fill : false,\r\n                data: [last.confirmed, last.recovered, last.death]\r\n                },\r\n            ]\r\n        });\r\n\r\n        }\r\n\r\n        \r\n        fetchEvent();\r\n    },[])\r\n\r\n    return (\r\n        <section>\r\n            <h2>2021 국내 코로나 현황</h2>\r\n            <div className=\"contents\">\r\n                    <div>\r\n                        <Bar data={confirmedData} options={\r\n                            {title : {display:true, text:\"누적 확진자 추이\", fontSize:16}},\r\n                            {legend : {display:true, position:\"bottom\"}}\r\n                        }></Bar>\r\n                    </div>\r\n                    <div>\r\n                        <Line data={quarantinedData} options={\r\n                            {title : {display:true, text:\"월별 격리자 현황\", fontSize:16}},\r\n                            {legend : {display:true, position:\"bottom\"}}\r\n                        }></Line>\r\n                    </div>\r\n                    <div>\r\n                        <Doughnut data={comparedData} options={\r\n                            {title : {display:true, text:`누적 확진, 해제, 사망 (${new Date().getMonth() + 1}월)`, fontSize:16}},\r\n                            {legend : {display:true, position:\"bottom\"}}\r\n                        }></Doughnut>\r\n                    </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Contents\r\n","import React from 'react'\r\nimport '../styles/Header.css';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header className=\"header\">\r\n        <h2>COVID-19</h2>\r\n        <select>\r\n          <option>국내</option>\r\n          <option>세계</option>\r\n        </select>\r\n      </header>\r\n    )\r\n}\r\n","import './App.css';\nimport Contents from './components/Contents';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Contents/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}